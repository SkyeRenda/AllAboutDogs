@page "/"
@using AllAboutDogs.Shared;
@inject HttpClient Http

<div class="start">

    <PageTitle>Index</PageTitle>

    <h1 >All About Dogs!</h1>
    <p> This web page is all about dogs and their information.
        <div >
            <p>Built by <a class="link" href="skyerenda.azurewebsites.net">Skye Renda.</a></p>
            
        </div>
    </p>
    <p> Search the name of the breed below:</p>
</div> 
    

<div class="search-bar">
    <Autocomplete 
                  TItem="BreedName"
                  TValue="string"
                  Data="@DogBreedList"
                  TextField="@(( item ) => item.Name)"
                  ValueField="@(( item ) => item.Name)"
                  @bind-SelectedValue="@SelectedSearchValue"
                  @bind-SelectedText="@SelectAutoCompleteText"
                  Placeholder="Search..."
                  Filter="AutocompleteFilter.StartsWith"
                  FreeTyping
                  CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
        <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
    </Autocomplete>
</div>




@if (selectedBreeds != null)
{   <div class="card-stack">

        @foreach (string selection in selectedBreeds)
        { 
                <div @key="@selection" class="dog-card">
                 <button class="close-button" @onclick="(() => DeleteBreed(selection))"><img class="close-icon" src="/close.png" alt="Close Button" /></button>
                <AllAboutDogs.Client.Components.DogCardDeck breedName="@selection"></AllAboutDogs.Client.Components.DogCardDeck>
               
            </div>
            
        }
    </div>
}


@code {
    public IEnumerable<BreedName> DogBreedList { get; set; } = new List<BreedName>();

    protected override async Task OnInitializedAsync()
    {
        DogBreedList = await Http.GetFromJsonAsync<IEnumerable<BreedName>>("/api/DogList/FetchBreedList");
        await base.OnInitializedAsync();
    }

    public List<string> selectedBreeds = new List<string>();

    public string SelectAutoCompleteText { get; set; } = "";

    public string _selectSearchValue = "";

    public string SelectedSearchValue
    {
        get => _selectSearchValue;
        set
        {
            _selectSearchValue = value;
            AddBreed(value);
  
        }
    }
    private void AddBreed(string n)
    {
        if (n != null && selectedBreeds.Contains(n) == false)
        {
            selectedBreeds.Add(n);
            
        }
        
        
    }

    private void DeleteBreed(string n)
    {
        selectedBreeds.Remove(n);
        
    }


    

  

 }
